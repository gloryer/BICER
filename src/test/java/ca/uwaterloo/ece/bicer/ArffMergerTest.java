package ca.uwaterloo.ece.bicer;
import org.junit.Test;

import ca.uwaterloo.ece.bicer.utils.Labeler;
import ca.uwaterloo.ece.bicer.utils.Utils;
import weka.core.Attribute;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Arrays;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'j22nam' at '27/05/16 5:45 PM' with Gradle 2.13",
 *
 * @author j22nam, @date 27/05/16 5:45 PM
 */
public class ArffMergerTest {
    @Test public void testSomeLibraryMethod() {
    	
    	int numDataFolds = 8;
    	String[] dirNames = {"arffsCleanedWOTestCases", "arffsNoiseFilteredWOTestCases","arffsManuallyFilteredWOTestCases"};
    	int[] patchSizes = {-1,5,10,20,50,100,200};
    	
    	String startDateForTraining = /*"2007-09-13"; //*/ "2010-09-17";
    	String endDateForTraining = /*"2009-05-17"; //*/"2011-04-21";
    	
    	String startDateForTest = /*"2009-07-30"; //*/"2011-05-28";
    	String endDateForTest = /*"2009-09-27"; //*/"2011-06-29";
    	
    	String dateAttributeName = "411_commit_time";
    	String pathAttributeName = "412_full_path";
    	String classAttributeName = "500_Buggy?";
    	
    	String project = "lucene";
    	
		for(int patchSize:patchSizes){
			
			String pathPostfix = "";
			if(patchSize>0)
				pathPostfix = "_" + patchSize;
			
			for(String dirName: dirNames){
		    	String dataPath = System.getProperty("user.home") + "/Documents/UW/ODP/projects/" + project + "/" + dirName + pathPostfix + "/";
		    	
		    	ArrayList<String> changeIDsForTraining = new ArrayList<String>();
		    	ArrayList<String> changeIDsForTest = new ArrayList<String>();
		    	ArrayList<Attribute> attributes = new ArrayList<Attribute>();
		    	
		    	Instances dummyInstances = Utils.loadArff(dataPath + "0/train.arff", classAttributeName);
		    	for(int i=0;i<16;i++){
		    		attributes.add(dummyInstances.attribute(i));
		    	}
		    	attributes.add(dummyInstances.attribute(dummyInstances.classIndex()));
		    	
		    	Instances newTrainingInstances = new Instances("NewTrainingData",attributes,0);
		    	Instances newTestInstances = new Instances("NewTestData",attributes,0);
		    	
		    	System.out.println("newTrainingInstances.numAttributes(): " + newTrainingInstances.numAttributes());
		    	
		    	Attribute newDateAttribute = new Attribute(dateAttributeName,(ArrayList<String>)null);
		    	Attribute newPathAttribute = new Attribute(pathAttributeName,(ArrayList<String>)null);
		    	int dateAttrIndex = newTrainingInstances.attribute(dateAttributeName).index();
		    	int pathAttrIndex = newTrainingInstances.attribute(pathAttributeName).index();
		    	newTrainingInstances.deleteAttributeAt(newTrainingInstances.attribute(dateAttributeName).index());
		    	newTrainingInstances.insertAttributeAt(newDateAttribute,dateAttrIndex);
		    	newTrainingInstances.deleteAttributeAt(newTrainingInstances.attribute(pathAttributeName).index());
		    	newTrainingInstances.insertAttributeAt(newPathAttribute,pathAttrIndex);
		    	
		    	newTestInstances.deleteAttributeAt(newTrainingInstances.attribute(dateAttributeName).index());
		    	newTestInstances.insertAttributeAt(newDateAttribute,dateAttrIndex);
		    	newTestInstances.deleteAttributeAt(newTrainingInstances.attribute(pathAttributeName).index());
		    	newTestInstances.insertAttributeAt(newPathAttribute,pathAttrIndex);
		    	
		    	System.out.println("newTrainingInstances.numAttributes(): " + newTrainingInstances.numAttributes());
		    	System.out.println(newDateAttribute);
		    	
		    	for(int i=0; i<numDataFolds;i++){
		    		Instances instances = Utils.loadArff(dataPath + i + "/train.arff", classAttributeName);
		    		Instances instances2 = Utils.loadArff(dataPath + i + "/test.arff", classAttributeName);
		    		
		    		// for training
		    		getNewInstances(startDateForTraining, endDateForTraining, dateAttributeName, pathAttributeName, changeIDsForTraining,
							newTrainingInstances, instances);
		    		getNewInstances(startDateForTraining, endDateForTraining, dateAttributeName, pathAttributeName, changeIDsForTraining,
							newTrainingInstances, instances2);
		    		
		    		// for test
		    		getNewInstances(startDateForTest, endDateForTest, dateAttributeName, pathAttributeName, changeIDsForTest,
		    				newTestInstances, instances);
		    		getNewInstances(startDateForTest, endDateForTest, dateAttributeName, pathAttributeName, changeIDsForTest,
		    				newTestInstances, instances2);
		    		
		    		System.out.println(i +" ---");
		    		System.out.println(newTrainingInstances.numInstances());
		    		System.out.println(newTestInstances.numInstances());
		    		
		    		
		    	}
		    	System.out.println("---");
		    	System.out.println("newTrainingInstances.numAttributes(): " + newTrainingInstances.numAttributes());
		    	System.out.println("newTestInstances.numAttributes(): " + newTestInstances.numAttributes());
		    	String targetPath = System.getProperty("user.home") + "/Documents/UW/ODP/projects/" + project + "/" + "arffsMerged/"; 
		    	ArrayList<String> lines = getStrArrayListFromArff(newTrainingInstances);
				Utils.writeAFile(lines, targetPath + dirName + pathPostfix + "/" + "train.arff");
		
				ArrayList<String> linesTest = getStrArrayListFromArff(newTestInstances);
				Utils.writeAFile(linesTest, targetPath + dirName + pathPostfix + "/" + "test.arff");
			}
		}
    }

	private ArrayList<String> getStrArrayListFromArff(Instances newInstances) {
		String arffRelation = newInstances.relationName();
		ArrayList<String> lines = new ArrayList<String>();
		
		lines.add(Instances.ARFF_RELATION + " " + arffRelation);
		
		for (int i = 0; i < newInstances.numAttributes(); i++) {
			lines.add(newInstances.attribute(i).toString());
		}
		
		lines.add("\n" + Instances.ARFF_DATA);

		for(int i=0; i < newInstances.numInstances();i++){
			/*if(newInstances.get(i).numAttributes()>21268){
				System.out.println(newInstances.get(i).value(0));
				continue;
			}*/
				
			lines.add(newInstances.get(i).toString());
		}
		return lines;
	}

	private void getNewInstances(String startDate, String endDate, String dateAttributeName, String pathAttributeName,
			ArrayList<String> changeIDs, Instances newInstances, Instances instances) {
		
		int attrIdxForDate = instances.attribute(dateAttributeName).index();
		int attrIdxForPath = instances.attribute(pathAttributeName).index();
		
		for(Instance instance:instances){
			String strDate = instance.stringValue(attrIdxForDate);
			String strPath = instance.stringValue(attrIdxForPath);
			
			if(strDate.length()<10) // corrupted instances -- continue
				continue;
			
			if(startDate.compareTo(strDate.substring(0, 10))<=0 && strDate.substring(0, 10).compareTo(endDate)<=0){
				String changeID = "" + instance.value(0);
				
				if(!changeIDs.contains(changeID)){
					changeIDs.add(changeID);
					
					double[] vals = instance.toDoubleArray();
					
					vals[attrIdxForDate] = newInstances.attribute(dateAttributeName).addStringValue(strDate);
					vals[attrIdxForPath] = newInstances.attribute(pathAttributeName).addStringValue(strPath);
					
					double[] newVals = new double[17];
					
					for(int i=0;i<16;i++)
						newVals[i] = vals[i];
					
					newVals[16] = vals[vals.length-1];
					
					newInstances.add(new DenseInstance(1.0, newVals));
				}
			}
		}
	}
}
